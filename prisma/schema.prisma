// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Lead          Lead[]
  FollowUp      FollowUp[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Program {
  id   String @id @default(uuid())
  name String
}

model Lead {
  id     String @id @default(uuid())
  number String @unique // âœ… required

  //TODO: need to add assignee id

  studentName String?
  parentName  String?

  email      String?
  age        Int?
  grade      String?
  gender     Gender?
  schoolName String?
  address    String?
  status     LeadStatus     @default(NEW)
  source     LeadSource?
  branch     CompanyBranch?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Programs as dropdown (array of IDs)
  programs String[]

  followups FollowUp[]

  student Student?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowUp {
  id       String         @id @default(uuid())
  due_date DateTime
  priority Priority
  remark   String?
  status   FollowUpStatus @default(NEW)

  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id           String        @id @default(uuid())
  number       String        @unique
  name         String
  parentName   String
  email        String
  age          Int
  grade        String
  gender       Gender
  schoolName   String
  address      String
  enrolledDate DateTime      @default(now())
  branch       CompanyBranch

  // Optional: if you still want to track which lead converted
  leadId String @unique
  lead   Lead   @relation(fields: [leadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LeadStatus {
  NEW
  ONGOING
  CRITICAL
  CONVERTED
  LOST
}

enum FollowUpStatus {
  NEW
  ONGOING
  CRITICAL
  CONVERTED
  LOST
}

enum CompanyBranch {
  PATAN
  BAUDHA
  BAFAL
}

enum LeadSource {
  REFERRAL
  WALK_IN
  WEBSITE
  FACEBOOK
  WHATSAPP
  INSTAGRAM
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
